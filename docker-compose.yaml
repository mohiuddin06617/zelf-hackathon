
services:

  db:
    image: postgres:14.0-alpine
    restart: unless-stopped
    volumes:
      - ./db/data/:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: contentapi
      POSTGRES_USER: django
      POSTGRES_PASSWORD: django
    expose:
      - 5432
    ports:
      - "5432:5432"

  redis:
    restart: on-failure
    image: redis:7.2.1
    expose:
      - 6379
    ports:
      - "6379:6379"

  app: &app
    container_name: contentapi
    build:
      context: .
      dockerfile: DockerFile
    restart: unless-stopped
    command: "python src/manage.py runserver 0.0.0.0:3000"
    ports:
      - "3000:3000"
    expose:
      - 3000
    depends_on:
      - db
      - redis
    volumes:
      - type: bind
        source: ./src
        target: /src
    environment:
      DATABASE_URL: postgres://django:django@db/contentapi
      REDIS_URL: redis://redis:6379/1

#  celery-task-processor:
#    build:
#      context: .
#      args:
#        - MODE=DEVELOPMENT
#      container_name: celery-task-processor
#      command: "celery -A contentapi.celery worker -l info -Q contentapi.content_pull --hostname=basic@%h --logfile=/code/logs/celery.log"
##      volumes:
##        - ./logs/celery-task-processor/:/code/logs/
#      depends_on:
#        - redis
##    command: ["celery", "-A", "contentapi.celery", "worker",
##              "--loglevel=INFO", "--pool=gevent",
##              "-n celery-task-processor@%%h"]

#  celery-task-beat:
#    build:
#      context: .
#      args:
#        - MODE=DEVELOPMENT
#      container_name: celery-task-beat
#      command: "celery -A contentapi.celery beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler --logfile=/code/logs/celery.log"
##      volumes:
##        - ./logs/celery-task-beat/:/code/logs/
#      depends_on:
#        - redis